---
title: "Project 4: AI vs Non-AI Careers"
format: html
execute:
  eval: true
  echo: true
  warning: false
  cache: false
---

## Introduction

This project explores **AI vs Non-AI careers** using the `lightcast_job_postings.csv` dataset.  
We apply clustering, regression, and classification to evaluate trends in job markets, with a focus on salary and employability.  
The goal is to help job seekers understand how AI is shaping opportunities in 2024.

---

## Data Preparation

```{python}
import pandas as pd
import numpy as np

# Load dataset
df = pd.read_csv("data/lightcast_job_postings.csv", low_memory=False)

# ---- Salary ----
salary_candidates = ["SALARY","SALARY_ANNUAL","SALARY_MEDIAN"]
for c in salary_candidates:
    if c in df.columns:
        df["salary"] = pd.to_numeric(df[c], errors="coerce")
        break

# ---- Industry ----
if "NAICS_2022_6_NAME" in df.columns:
    df["industry"] = df["NAICS_2022_6_NAME"]
else:
    df["industry"] = df.get("INDUSTRY", "Unknown")

# ---- AI Flag ----
df["is_ai"] = df["TITLE"].str.contains(
    "AI|Artificial Intelligence|Machine Learning|Deep Learning",
    case=False, na=False
).astype(int)

# Preview cleaned data
df[["TITLE","industry","salary","is_ai"]].head(10)
```

---

## Regression: Salary Prediction

```{python}
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer

# Keep only rows with salary
df_model = df.dropna(subset=["salary"]).copy()

# One-hot encode industry
df_model = pd.get_dummies(df_model, columns=["industry"], drop_first=True)

# Keep only numeric features
X = df_model.drop(columns=["TITLE","salary","is_ai"])
X = X.select_dtypes(include=["int64","float64","uint8"])
y = df_model["salary"]

# Impute missing values (median)
imputer = SimpleImputer(strategy="median")
X_imputed = imputer.fit_transform(X)

# Split
X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.3, random_state=42)

# Train regression model
reg = LinearRegression()
reg.fit(X_train, y_train)
y_pred = reg.predict(X_test)

# Metrics
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)
rmse, r2
```

---

## Classification: AI vs Non-AI Jobs

```{python}
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score, confusion_matrix
from sklearn.impute import SimpleImputer

# Keep only rows with salary
df_clf = df.dropna(subset=["salary"]).copy()

# One-hot encode industry
df_clf = pd.get_dummies(df_clf, columns=["industry"], drop_first=True)

# Keep only numeric features
X = df_clf.drop(columns=["TITLE","salary","is_ai"])
X = X.select_dtypes(include=["int64","float64","uint8"])
y = df_clf["is_ai"]

# Impute missing values
imputer = SimpleImputer(strategy="median")
X_imputed = imputer.fit_transform(X)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.3, random_state=42)

# Train classifier
clf = LogisticRegression(max_iter=1000)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

# Metrics
acc = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)
acc, f1, cm
```

---

## Clustering: Job Segmentation

```{python}
from sklearn.cluster import KMeans

# Use salary + AI flag for clustering
features = df[["salary","is_ai"]].dropna()

kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
features["cluster"] = kmeans.fit_predict(features)

features.head(10)
```

---

## Visualizations

```{python}
import plotly.express as px
import plotly.io as pio
pio.templates.default = "plotly_white"

# Salary distribution by AI vs Non-AI
fig1 = px.histogram(
    df, x="salary", color="is_ai",
    barmode="overlay",
    title="Salary Distribution: AI vs Non-AI Jobs"
)
fig1.show()

# Clustering visualization
fig2 = px.scatter(
    features, x="salary", y="is_ai", color="cluster",
    title="KMeans Clusters of Jobs (by Salary & AI)"
)
fig2.show()
```

---

## Interpretation

- **Regression**: shows how salary varies by industry and other features.  
- **Classification**: predicts which jobs are AI-related with measurable accuracy and F1 score.  
- **Clustering**: segments jobs into natural groups (e.g., high-salary AI-heavy vs lower-salary non-AI).  

**Implications for job seekers**:  
- AI roles may show higher salary clusters.  
- Certain industries have stronger AI adoption.  
- Understanding these trends helps candidates position themselves competitively.  

