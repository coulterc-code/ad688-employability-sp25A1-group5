---
title: "Project 4: AI vs Non-AI Careers"
format: html
execute:
  eval: true
  echo: false
  warning: false
  cache: false
  fig-format: png
---

# Introduction

This project explores **AI vs Non-AI careers** using the `lightcast_job_postings.csv` dataset.  
We apply **clustering, regression, and classification** to evaluate trends in job markets, with a focus on **salary, experience, and employability**.  
The goal is to help job seekers understand how AI is shaping opportunities in 2024.

---

# Analysis

```{python}
import pandas as pd, numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, f1_score, confusion_matrix
from sklearn.impute import SimpleImputer
from sklearn.cluster import KMeans
import plotly.express as px
import plotly.io as pio
import plotly.figure_factory as ff

pio.templates.default = "plotly_white"
pio.renderers.default = "png"
```

---

## Load dataset

```{python}
df = pd.read_csv("lightcast_job_postings.csv", low_memory=False)

# Salary
if "SALARY" in df.columns:
    df["salary"] = pd.to_numeric(df["SALARY"], errors="coerce")
else:
    df["salary"] = None

# Industry
if "NAICS_2022_6_NAME" in df.columns:
    df["industry"] = df["NAICS_2022_6_NAME"]
else:
    df["industry"] = df.get("NAICS_2022_2_NAME", "Unknown")

# AI Flag
df["is_ai"] = df["TITLE_NAME"].str.contains(
    "AI|Artificial Intelligence|Machine Learning|Deep Learning",
    case=False, na=False
).astype(int)

# Experience
df["years_experience"] = df[["MIN_YEARS_EXPERIENCE","MAX_YEARS_EXPERIENCE"]].mean(axis=1)

# Keep only rows with actual salary and years_experience data
print(f"Original dataset: {len(df)} rows")
df = df.dropna(subset=["salary", "years_experience"])
print(f"After removing missing salary and years_experience: {len(df)} rows")

# Handle Missing Values
derived_cols = ["salary", "industry", "is_ai", "years_experience"]
cols_to_check = [col for col in df.columns if col not in derived_cols]
cols_to_drop = [col for col in cols_to_check if df[col].isna().sum() > len(df) * 0.5]
df.drop(columns=cols_to_drop, inplace=True)

# Fill missing values
for col in df.select_dtypes(include="object").columns:
    df[col].fillna("Unknown", inplace=True)

# Preview table
preview = df[["TITLE_NAME", "industry", "salary", "years_experience", "is_ai"]].head(10).copy()
preview["salary"] = preview["salary"].apply(lambda x: f"${x:,.0f}" if pd.notna(x) else "")
preview["years_experience"] = preview["years_experience"].round(1)
fig_preview = ff.create_table(preview, index=False)
fig_preview.update_layout(width=2500, height=500)
fig_preview.write_image("preview_table.png") 
#fig_preview.show()

```
---

<!-- ## Regression: Salary Prediction -->

```{python}
df_model = df.dropna(subset=["salary"]).copy()
df_model = pd.get_dummies(df_model, columns=["industry"], drop_first=True)

X = df_model.drop(columns=["TITLE_NAME","salary","is_ai"])
X = X.select_dtypes(include=["int64","float64","uint8"])
y = df_model["salary"]

imputer = SimpleImputer(strategy="median")
X_imputed = imputer.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.3, random_state=42)

reg = LinearRegression()
reg.fit(X_train, y_train)
y_pred = reg.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

# Bar chart of results
reg_results = pd.DataFrame({"Metric": ["RMSE","R²"], "Value": [rmse, r2]})
fig_reg = px.bar(reg_results, x="Metric", y="Value",
                 title="Regression Performance: Salary Prediction",
                 text_auto=True)
fig_reg.write_image("regression_performance.png") 
#fig_reg.show()
```

---

## Classification: AI vs Non-AI Jobs

```{python}
df_clf = df.dropna(subset=["salary"]).copy()
df_clf = pd.get_dummies(df_clf, columns=["industry"], drop_first=True)

X = df_clf.drop(columns=["TITLE_NAME","salary","is_ai"])
X = X.select_dtypes(include=["int64","float64","uint8"])
y = df_clf["is_ai"]

X_imputed = imputer.fit_transform(X)

if len(y.unique()) > 1:
    X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.3, random_state=42)
    clf = LogisticRegression(max_iter=1000)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)

    acc = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred, zero_division=0)
    cm = confusion_matrix(y_test, y_pred)

    # Performance bar chart
    clf_results = pd.DataFrame({"Metric": ["Accuracy","F1 Score"], "Value": [acc, f1]})
    fig_clf = px.bar(clf_results, x="Metric", y="Value",
                     title="Classification Performance: AI vs Non-AI",
                     text_auto=True)
    #fig_clf.show()

    # Confusion Matrix
    fig_cm = px.imshow(cm, text_auto=True, title="Confusion Matrix",
                       labels=dict(x="Predicted", y="Actual"))
    fig_cm.show()
else:
    print("⚠️ Only one class found — cannot run classification.")
```

---

## Clustering: Job Segmentation

```{python}
features = df[["salary","years_experience"]].dropna()
kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
features["cluster"] = kmeans.fit_predict(features)

# Show sample table
fig_cluster_table = ff.create_table(features.head(10))
fig_cluster_table.show()

# Scatter plot
fig2 = px.scatter(features, x="salary", y="years_experience", color="cluster",
                  title="KMeans Clusters of Jobs (by Salary & Experience)")
#fig2
```

---

## Visualizations

```{python}
fig1 = px.histogram(df, x="salary", color="is_ai",
                    barmode="overlay",
                    title="Salary Distribution: AI vs Non-AI Jobs")
fig1.write_image("salary_distribution.png")
fig1.show()
```

---

# Insights for Job Seekers

- **AI roles often cluster at higher salaries** compared to non-AI roles.  
- **Experience remains critical** — higher years of experience align with higher pay clusters.  
- **Industries with strong AI adoption** (e.g., tech, finance) show clearer salary advantages.  

## Takeaways:
- Highlight **AI-related skills** to access higher-paying roles.  
- Leverage **industry trends** to target fields with high AI adoption.  
- Use clustering insights to understand **where your profile fits** (AI-heavy vs. traditional roles).  

