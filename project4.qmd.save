---
title: "Project 4: AI vs Non-AI Careers"
format: html
---

# Introduction

This project explores **AI vs Non-AI careers** using the `lightcast_job_postings.csv` dataset.  
We apply clustering, regression, and classification to evaluate trends in job markets, with a focus on salary and employability.

---

# Modeling {.tabset}

## Regression

```{python}
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
df = pd.read_csv("data/lightcast_job_postings.csv")

# Example placeholders (replace with your datasetâ€™s real columns)
X = df[["years_experience", "education_level_encoded"]]
y = df["salary"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("RMSE:", mean_squared_error(y_test, y_pred, squared=False))
print("RÂ²:", r2_score(y_test, y_pred))

Classification
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score, confusion_matrix

# Example: classify AI vs Non-AI jobs
df['is_ai'] = df['job_title'].str.contains("AI|Artificial Intelligence|Machine Learning|Deep Learning",
                                           case=False, na=False).astype(int)

X = df[["years_experience", "education_level_encoded"]]  # replace with your datasetâ€™s features
y = df["is_ai"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

clf = LogisticRegression(max_iter=1000)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

Clustering
from sklearn.cluster import KMeans

# Example: cluster jobs by salary + years of experience
features = df[["salary", "years_experience"]]  # replace with real columns
kmeans = KMeans(n_clusters=3, random_state=42)
df["cluster"] = kmeans.fit_predict(features)

df[["job_title", "cluster"]].head()

Interpretation

Regression: What drives salary?

Classification: Which features distinguish AI vs Non-AI jobs?

Clustering: How do jobs segment naturally (by salary, skills, etc.)?

Implications for job seekers.

Visualization Example
import plotly.express as px
import plotly.io as pio

pio.templates.default = "plotly_white"

fig = px.histogram(df, x="salary", color="is_ai", barmode="overlay")
fig.update_layout(template="plotly_white", font=dict(family="Roboto", size=14))
fig.show()


---

## ðŸ”¹ How to save in `nano`
1. After pasting, press **`CTRL + O`** (thatâ€™s letter O, not zero) â†’ then press **Enter** to save.  
2. Press **`CTRL + X`** to exit nano.  

Youâ€™ll now have a file called `project4.qmd` in your repo folder ðŸŽ‰  

---

ðŸ‘‰ Do you want me to show you the **exact `_quarto.yml` snippet** you need to add next, so the tab shows up on your site
