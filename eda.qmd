---
title: "Exploratory Data Analysis (EDA)"
subtitle: "Visualizing and Interpreting Job Market Trends"
author:
  - name: Connor Coulter
    affiliations:
      - id: bu
        name: Boston University
        city: Boston
        state: MA
  - name: Wei Wang
    affiliations:
      - ref: bu
  - name: Balqis Bevi Abdul Hannan Kanaga
    affiliations:
      - ref: bu
bibliography: references.bib
csl: csl/econometrica.csl
format: 
  html:
    embed-resources: true
    toc: true
    number-sections: true
    df-print: paged
    math: false
  docx: default
execute:
  echo: false
  eval: true
  freeze: auto
jupyter: python3
---

```{python}

#| include: false

import pandas as pd, numpy as np, os, missingno as msno, matplotlib.pyplot as plt
import plotly.io as pio
pio.renderers.default = "notebook"

# load data
CSV_PATHS = ["data/lightcast_job_postings.csv", "lightcast_job_postings.csv"]
csv_path = next((p for p in CSV_PATHS if os.path.exists(p)), None)
if not csv_path:
    raise FileNotFoundError("WARNING: lightcast_job_postings.csv not found")

df = pd.read_csv(csv_path, low_memory=False)
print("Loaded dataset:", df.shape)
df.head(5)

df["INDUSTRY_DISPLAY"] = (
    df["NAICS_2022_6_NAME"]
    if "NAICS_2022_6_NAME" in df.columns
    else df.get("INDUSTRY", pd.Series(["Unknown"]*len(df)))
)

salary_candidates = ["SALARY","SALARY_MEDIAN","SALARY_MID","SALARY_ANNUAL","PAY_RATE"]
for c in salary_candidates:
    if c in df.columns:
        df[c] = pd.to_numeric(df[c], errors="coerce")

for col in salary_candidates:
    if col in df.columns:
        df["SALARY_DISPLAY"] = df[col]
        break
else:
    df["SALARY_DISPLAY"] = np.nan

if "SALARY_DISPLAY" in df.columns:
    df["SALARY_DISPLAY"].fillna(df["SALARY_DISPLAY"].median(), inplace=True)

print("Derived non-null:", {
    "INDUSTRY_DISPLAY": df["INDUSTRY_DISPLAY"].notna().sum(),
    "SALARY_DISPLAY": df["SALARY_DISPLAY"].notna().sum()
})

# drops unused cols
columns_to_drop = [
    "ID","LAST_UPDATED_TIMESTAMP","DUPLICATES","ACTIVE_URLS","ACTIVE_SOURCES_INFO",
    "TITLE_RAW","BODY","COMPANY_RAW",
    "NAICS2","NAICS2_NAME","NAICS3","NAICS3_NAME","NAICS4","NAICS4_NAME",
    "NAICS5","NAICS5_NAME","NAICS6","NAICS6_NAME",
    "NAICS_2022_2","NAICS_2022_2_NAME","NAICS_2022_3","NAICS_2022_3_NAME",
    "NAICS_2022_4","NAICS_2022_4_NAME","NAICS_2022_5","NAICS_2022_5_NAME",
    "SOC_2","SOC_2_NAME","SOC_3","SOC_3_NAME","SOC_5","SOC_5_NAME",
    "CIP2","CIP2_NAME","CIP4","CIP4_NAME","CIP6","CIP6_NAME",
    "LOT_CAREER_AREA","LOT_CAREER_AREA_NAME","LOT_OCCUPATION","LOT_OCCUPATION_NAME",
    "LOT_SPECIALIZED_OCCUPATION","LOT_SPECIALIZED_OCCUPATION_NAME",
    "LOT_OCCUPATION_GROUP","LOT_OCCUPATION_GROUP_NAME",
    "LOT_V6_SPECIALIZED_OCCUPATION","LOT_V6_SPECIALIZED_OCCUPATION_NAME",
    "LOT_V6_OCCUPATION","LOT_V6_OCCUPATION_NAME","LOT_V6_OCCUPATION_GROUP",
    "LOT_V6_OCCUPATION_GROUP_NAME","LOT_V6_CAREER_AREA","LOT_V6_CAREER_AREA_NAME",
    "ONET","ONET_NAME","ONET_2019","ONET_2019_NAME"
]
drop_existing = [c for c in columns_to_drop if c in df.columns]
df.drop(columns=drop_existing, inplace=True)
print("Remaining columns (first 30):", list(df.columns)[:30])

import missingno as msno, matplotlib.pyplot as plt

msno.heatmap(df)
plt.title("Missing Values Heatmap")
plt.show()

df.dropna(thresh=len(df) * 0.5, axis=1, inplace=True)

if "SALARY_DISPLAY" in df.columns:
    df["SALARY_DISPLAY"].fillna(df["SALARY_DISPLAY"].median(), inplace=True)

for col in df.select_dtypes(include="object").columns:
    df[col].fillna("Unknown", inplace=True)

subset_cols = [c for c in ["TITLE","COMPANY_NAME","LOCATION","POSTED"] if c in df.columns]
if subset_cols:
    before = len(df)
    df.drop_duplicates(subset=subset_cols, keep="first", inplace=True)
    print(f"Removed {before - len(df)} duplicates using {subset_cols}")

print("Final SALARY_DISPLAY Non-Null Count:", df["SALARY_DISPLAY"].notna().sum())
```


# Job Postings by Industry (Top 15)
```{python}
import plotly.io as pio
import plotly.express as px

pio.renderers.default = "vscode+notebook+png"

# Filter out "Unclassified Industry" before getting top 15
counts = (
    df[df["INDUSTRY_DISPLAY"] != "Unclassified Industry"]
    ["INDUSTRY_DISPLAY"]
    .value_counts()
    .head(15)
    .reset_index(name="Count")
    .rename(columns={"INDUSTRY_DISPLAY": "Industry"})
)

fig1 = px.bar(
    counts, x="Count", y="Industry", orientation="h",
    title="Top 15 Industries by Number of Job Postings (Excluding Unclassified)"
)
fig1.show()
fig1.write_image("output/plot 1.svg", width=3500, height=600, scale=1)
```

## Rationale
Highlights sectors where demand is concentrated, showing which industries are actively hiring.

## Key Insights
- Top Hiring Industries:
Custom Computer Programming, Management Consulting, and Employment Agencies dominate job postings.
- Skewed Distribution:
The top 4 industries account for a significantly larger share of job postings than the rest.
- Professional Services Focus:
Many high-posting sectors are centered around tech, consulting, healthcare and education -- reflecting demand for knowledge-based roles.

# Salary Distribution by Industry (Top 15)
```{python}
sdf = df[["INDUSTRY_DISPLAY","SALARY_DISPLAY"]].copy()
sdf = sdf.dropna()
sdf = sdf[sdf["SALARY_DISPLAY"] > 0]

top_industries = sdf["INDUSTRY_DISPLAY"].value_counts().head(15).index
sdf = sdf[sdf["INDUSTRY_DISPLAY"].isin(top_industries)]

fig2 = px.box(
    sdf, x="INDUSTRY_DISPLAY", y="SALARY_DISPLAY",
    title="Salary Distribution by Industry (Top 15)",
    points=False,
    labels={
        "INDUSTRY_DISPLAY": "Industry",
        "SALARY_DISPLAY": "Salary"
    }
)
fig2.update_layout(xaxis_tickangle=-45)
fig2.show()
fig2.write_image("output/plot 2.svg", width=3500, height=600, scale=1)
```

## Rationale
Shows where negotiation power exists and highlights industries paying well.

## Key Insights
- Wide Salary Ranges in Staffing & Tech Services:
Industries like Temporary Help Services and Employment Placement Agencies exhibit large salary spreads with high outliers, though their median pay remains modest.
- Stable Pay in Professional Sectors:
Most industries maintain a consistent median salary around $100K-$150K, reflecting standardized compensation and less variation in negotiation power.

# Remote vs. On-Site Jobs
```{python}
if "REMOTE_TYPE_NAME" in df.columns:
    rc = df["REMOTE_TYPE_NAME"].value_counts().reset_index()
    rc.columns = ["Remote Type", "Count"]
    
    # Updated custom color palette with cohesive blues
    color_sequence = ["#636EFA", "#4A90E2", "#00CC96", "#AB63FA", "#274BDB"] 

    fig3 = px.pie(
        rc,
        names="Remote Type",
        values="Count",
        title="Remote vs. On-Site Job Distribution",
        color_discrete_sequence=color_sequence
    )
    fig3.show()
    fig3.write_image("output/plot 3.svg", width=3500, height=600, scale=1)
```

## Rationale
Workplace flexibility is a major factor in today's job market.

## Key Insights
- Limited Remote Availability:
Only about 17% of job postings are labeled as Remote, with Hybrid Remote and Not Remote making up even smaller portions.
- Data Gaps in Job Listings:
A significant 78.3% of postings lack remote classification, indicating either incomplete employer data or inconsistent labeling, which may affect job seekers' filtering and selection.
